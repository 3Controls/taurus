//=============================================================================
//
// file :         OneDExpChannelClass.h
//
// description :  Include for the OneDExpChannelClass root class.
//                This class is represents the singleton class for
//                the OneDExpChannel device class.
//                It contains all properties and methods which the 
//                OneDExpChannel requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ONEDEXPCHANELCLASS_H
#define _ONEDEXPCHANELCLASS_H

#include <tango.h>
#include <OneDExpChannel.h>


namespace OneDExpChannel_ns
{//=====================================
//	Define classes for attributes
//=====================================
class ValueAttrib: public Tango::SpectrumAttr
{
public:
	ValueAttrib():SpectrumAttr("Value", Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~ValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<OneDExpChannel *>(dev))->read_Value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<OneDExpChannel *>(dev))->is_Value_allowed(ty);}
};

class DataAttrib: public Tango::SpectrumAttr
{
public:
	DataAttrib():SpectrumAttr("Data", Tango::DEV_DOUBLE, Tango::READ, 10000) {};
	~DataAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<OneDExpChannel *>(dev))->read_Data(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<OneDExpChannel *>(dev))->is_Data_allowed(ty);}
};

class DataLengthAttrib: public Tango::Attr
{
public:
	DataLengthAttrib():Attr("DataLength", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~DataLengthAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<OneDExpChannel *>(dev))->read_DataLength(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<OneDExpChannel *>(dev))->write_DataLength(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<OneDExpChannel *>(dev))->is_DataLength_allowed(ty);}
};

class SimulationModeAttrib: public Tango::Attr
{
public:
	SimulationModeAttrib():Attr("SimulationMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~SimulationModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<OneDExpChannel *>(dev))->read_SimulationMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<OneDExpChannel *>(dev))->is_SimulationMode_allowed(ty);}
};

// InstrumentAttrib
class InstrumentAttrib: public Tango::Attr
{
public:
	InstrumentAttrib():Attr("Instrument", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~InstrumentAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<OneDExpChannel *>(dev))->read_Instrument(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<OneDExpChannel *>(dev))->write_Instrument(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<OneDExpChannel *>(dev))->is_Instrument_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<OneDExpChannel *>(dev))->is_Abort_allowed(any);}
};



class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<OneDExpChannel *>(dev))->is_Start_allowed(any);}
};



//
// The OneDExpChannelClass singleton definition
//

class OneDExpChannelClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long                    nb_static_attr;
	bool                    first_call_to_device_factory;

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static OneDExpChannelClass *init(const char *);
	static OneDExpChannelClass *instance();
	~OneDExpChannelClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	OneDExpChannelClass(string &);
	static OneDExpChannelClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace OneDExpChannel_ns

#endif // _ONEDEXPCHANNELCLASS_H
