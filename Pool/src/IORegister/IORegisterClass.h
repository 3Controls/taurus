//=============================================================================
//
// file :         IORegisterClass.h
//
// description :  Include for the IORegisterClass root class.
//                This class is represents the singleton class for
//                the IORegister device class.
//                It contains all properties and methods which the 
//                IORegister requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _IOREGISTERCLASS_H
#define _IOREGISTERCLASS_H

#include <tango.h>
#include <IORegister.h>


namespace IORegister_ns
{//=====================================
//	Define classes for attributes
//=====================================
class ValueAttrib: public Tango::Attr
{
public:
	ValueAttrib():Attr("Value", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~ValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<IORegister *>(dev))->read_Value(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<IORegister *>(dev))->write_Value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<IORegister *>(dev))->is_Value_allowed(ty);}
};

class SimulationModeAttrib: public Tango::Attr
{
public:
	SimulationModeAttrib():Attr("SimulationMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~SimulationModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<IORegister *>(dev))->read_SimulationMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<IORegister *>(dev))->is_SimulationMode_allowed(ty);}
};

// InstrumentAttrib
class InstrumentAttrib: public Tango::Attr
{
public:
	InstrumentAttrib():Attr("Instrument", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~InstrumentAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<IORegister *>(dev))->read_Instrument(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<IORegister *>(dev))->write_Instrument(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<IORegister *>(dev))->is_Instrument_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The IORegisterClass singleton definition
//

class IORegisterClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long 			nb_static_attr;
	bool			first_call_to_device_factory;

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static IORegisterClass *init(const char *);
	static IORegisterClass *instance();
	~IORegisterClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	IORegisterClass(string &);
	static IORegisterClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace IORegister_ns

#endif // _IOREGISTERCLASS_H
