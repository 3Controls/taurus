//=============================================================================
//
// file :        IORegister.h
//
// description : Include for the IORegister class.
//
// project :	IORegister device Pool Controller
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _IOREGISTER_H
#define _IOREGISTER_H

#include "PoolIndBaseDev.h"
#include <tango.h>

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

namespace Pool_ns
{
    class Pool;
    struct IORegisterPool;
}

namespace IORegister_ns
{

/**
 * Class Description:
 * IORegister controller class
 */

/*
 *	Device States Description:
*  Tango::ON :       The ioregister is ON and waiting.
*  Tango::FAULT :    A fault has been reported by the device controller.
*  Tango::UNKNOWN :  Impossible to communicate with the device controller.
 */


//class IORegister: public Tango::Device_4Impl
class IORegister: public Pool_ns::PoolIndBaseDev
{
public :
    //	Add your own data members here
    //-----------------------------------------


    //	Here is the Start of the automatic code generation part
    //-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
        Tango::DevLong	*attr_Value_read;
        Tango::DevLong	attr_Value_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	The ioregister identifier
 */
    Tango::DevLong	id;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
    IORegister(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
    IORegister(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
    IORegister(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
    ~IORegister() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
    void delete_device();
//@}

    
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
    virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
    virtual void always_executed_hook();

//@}

/**
 * @name IORegister methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
    virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for Value acquisition result.
 */
    virtual void read_Value(Tango::Attribute &attr);
/**
 *	Write Value attribute values to hardware.
 */
    virtual void write_Value(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for Value attribute.
 */
    virtual bool is_Value_allowed(Tango::AttReqType type);

/**
 * This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *      @return Status description
 *      @exception DevFailed
 */
        virtual Tango::ConstDevString   dev_status();


/**
 *	Read the device properties from database
 */
     void get_device_property();
//@}

    //	Here is the end of the automatic code generation part
    //-------------------------------------------------------------	

    Pool_ns::IORegisterPool &get_ioregister_element();

protected :	
    //	Add your own data members here
    //-----------------------------------------

    void inform_ghost(Tango::DevState,Tango::DevState);

public:

/**
 * @name Virtual abstract methods from Pool_ns::PoolBaseDev
 */
//@{
    
/**
 * The base_abort method.
 */
    virtual void base_abort(bool)			{ }
//@}	

/**
 * @name Virtual methods overwritten from Pool_ns::PoolBaseDev
 */
//@{
    virtual void pool_elem_changed(Pool_ns::PoolElemEventList &, Pool_ns::PoolElementEvent &) {}	
//@}	

};

}	// namespace_ns

#endif	// _IOREGISTER_H
