//=============================================================================
//
// file :         ControllerClass.h
//
// description :  Include for the ControllerClass root class.
//                This class is represents the singleton class for
//                the Controller device class.
//                It contains all properties and methods which the 
//                Controller requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _CONTROLLERCLASS_H
#define _CONTROLLERCLASS_H

#include <tango.h>
#include <Controller.h>


namespace Controller_ns
{//=====================================
//	Define classes for attributes
//=====================================
class ElementsAttrib: public Tango::SpectrumAttr
{
public:
	ElementsAttrib():SpectrumAttr("Elements", Tango::DEV_STRING, Tango::READ, 4096) {};
	~ElementsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Controller *>(dev))->read_Elements(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Controller *>(dev))->is_Elements_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class SendClass : public Tango::Command
{
public:
	SendClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	SendClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~SendClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Controller *>(dev))->is_Send_allowed(any);}
};



class DeleteElementClass : public Tango::Command
{
public:
	DeleteElementClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	DeleteElementClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~DeleteElementClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Controller *>(dev))->is_DeleteElement_allowed(any);}
};



class AddElementClass : public Tango::Command
{
public:
	AddElementClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AddElementClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AddElementClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<Controller *>(dev))->is_AddElement_allowed(any);}
};



//
// The ControllerClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	ControllerClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static ControllerClass *init(const char *);
	static ControllerClass *instance();
	~ControllerClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	ControllerClass(string &);
	static ControllerClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Controller_ns

#endif // _CONTROLLERCLASS_H
