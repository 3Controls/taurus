//=============================================================================
//
// file :         TwoDExpChannelClass.h
//
// description :  Include for the TwoDExpChannelClass root class.
//                This class is represents the singleton class for
//                the TwoDExpChannel device class.
//                It contains all properties and methods which the 
//                TwoDExpChannel requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _TWODEXPCHANNELCLASS_H
#define _TWODEXPCHANNELCLASS_H

#include <tango.h>
#include <TwoDExpChannel.h>


namespace TwoDExpChannel_ns
{//=====================================
//	Define classes for attributes
//=====================================
class ValueAttrib: public Tango::ImageAttr
{
public:
	ValueAttrib():ImageAttr("Value", Tango::DEV_DOUBLE, Tango::READ, 2000, 2000) {};
	~ValueAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_Value(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_Value_allowed(ty);}
};

class YDimAttrib: public Tango::Attr
{
public:
	YDimAttrib():Attr("YDim", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~YDimAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_YDim(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->write_YDim(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_YDim_allowed(ty);}
};

class XDimAttrib: public Tango::Attr
{
public:
	XDimAttrib():Attr("XDim", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~XDimAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_XDim(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->write_XDim(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_XDim_allowed(ty);}
};

class IFormatAttrib: public Tango::Attr
{
public:
	IFormatAttrib():Attr("IFormat", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~IFormatAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_IFormat(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->write_IFormat(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_IFormat_allowed(ty);}
};

class SimulationModeAttrib: public Tango::Attr
{
public:
	SimulationModeAttrib():Attr("SimulationMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~SimulationModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_SimulationMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_SimulationMode_allowed(ty);}
};

// InstrumentAttrib
class InstrumentAttrib: public Tango::Attr
{
public:
	InstrumentAttrib():Attr("Instrument", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~InstrumentAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->read_Instrument(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<TwoDExpChannel *>(dev))->write_Instrument(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<TwoDExpChannel *>(dev))->is_Instrument_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class AbortClass : public Tango::Command
{
public:
	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AbortClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AbortClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TwoDExpChannel *>(dev))->is_Abort_allowed(any);}
};



class StartClass : public Tango::Command
{
public:
	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<TwoDExpChannel *>(dev))->is_Start_allowed(any);}
};



//
// The TwoDExpChannelClass singleton definition
//

class TwoDExpChannelClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

	long                    nb_static_attr;
	bool                    first_call_to_device_factory;


public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static TwoDExpChannelClass *init(const char *);
	static TwoDExpChannelClass *instance();
	~TwoDExpChannelClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	TwoDExpChannelClass(string &);
	static TwoDExpChannelClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace TwoDExpChannel_ns

#endif // _TWODEXPCHANNELCLASS_H
