//=============================================================================
//
// file :        TwoDExpChannel.h
//
// description : Include for the TwoDExpChannel class.
//
// project :	TwoD Experimental Channel
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _TWODEXPCHANNEL_H
#define _TWODEXPCHANNEL_H

#include "PoolIndBaseDev.h"
#include <tango.h>

//using namespace Tango;
namespace Pool_ns
{
    struct TwoDExpChannelPool;
}

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------


namespace TwoDExpChannel_ns
{

class TwoDThread;

/**
 * Class Description:
 * Controller for two dimensional experimental channels
 */

/*
 *	Device States Description:
*  Tango::ON :       The experiment channel is ON
*  Tango::FAULT :    A fault has been reported by the device controller
*  Tango::UNKNOWN :  Impossible to communicate with the device controller
*  Tango::MOVING :   An acquisition is running
 */


class TwoDExpChannel:  public Pool_ns::PoolIndBaseDev
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevLong	*attr_XDim_read;
		Tango::DevLong	attr_XDim_write;
		Tango::DevLong	*attr_YDim_read;
		Tango::DevLong	attr_YDim_write;
		Tango::DevLong	*attr_IFormat_read;
		Tango::DevLong	attr_IFormat_write;
		Tango::DevDouble	*attr_Value_read;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	Maximum image x dimension
 */
	Tango::DevLong	maxXDim;
/**
 *	Maximum image y dimesion
 */
	Tango::DevLong	maxYDim;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	TwoDExpChannel(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	TwoDExpChannel(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	TwoDExpChannel(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~TwoDExpChannel() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name TwoDExpChannel methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for XDim acquisition result.
 */
	virtual void read_XDim(Tango::Attribute &attr);
/**
 *	Write XDim attribute values to hardware.
 */
	virtual void write_XDim(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for YDim acquisition result.
 */
	virtual void read_YDim(Tango::Attribute &attr);
/**
 *	Write YDim attribute values to hardware.
 */
	virtual void write_YDim(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for IFormat acquisition result.
 */
	virtual void read_IFormat(Tango::Attribute &attr);
/**
 *	Write IFormat attribute values to hardware.
 */
	virtual void write_IFormat(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Value acquisition result.
 */
	virtual void read_Value(Tango::Attribute &attr);
/**
 *	Read/Write allowed for XDim attribute.
 */
	virtual bool is_XDim_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YDim attribute.
 */
	virtual bool is_YDim_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for IFormat attribute.
 */
	virtual bool is_IFormat_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Value attribute.
 */
	virtual bool is_Value_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Abort command.
 */
	virtual bool is_Abort_allowed(const CORBA::Any &any);
/**
 * Start acquiring data
 *	@exception DevFailed
 */
	void	start();
/**
 * Stop acquiring data
 *	@exception DevFailed
 */
	void	abort();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	

    Pool_ns::TwoDExpChannelPool &get_twod_element();

protected :	
	//	Add your own data members here
	//-----------------------------------------


public:

        struct ShData
        {
                bool                      th_exit;
                bool                      i_am_dead;
                long                      error_nb;
                bool                      cont_error;
                bool                      stop_if_no_time;
                long                      cum_time;
                long                      cum_type;
                vector<double>            read_values;
                vector<double>            acq_dates;
                Tango::DevErrorList       errors;
                long                      fire_event;
                struct timespec           sleep_time;
        };



protected :

	TwoDThread              *th;
    omni_mutex              the_mutex;
    ShData                  the_shared_data;


	struct Simu_data
	{	
		double				simu_time;
		long				simu_type;
		TwoDExpChannel		*channel;
		
		Simu_data(TwoDExpChannel *);
		~Simu_data();
	};
	
	Simu_data			*save_atts;

	void inform_ghost(Tango::DevState,Tango::DevState);
/**
 * This command gets the device status (stored in its <i>device_status</i> dat
 * a member) and returns it to the caller.
 *      @return Status description
 *      @exception DevFailed
 */
	virtual Tango::ConstDevString   dev_status();
	
	
public:	
	virtual void base_abort(bool);
	void save_att_values() {save_atts = new Simu_data(this);}
	void restore_att_values() {if (save_atts!=NULL){delete save_atts;save_atts=NULL;}}
    
/**
 * @name Virtual methods overwritten from Pool_ns::PoolBaseDev
 */
//@{
    virtual void pool_elem_changed(Pool_ns::PoolElemEventList &, Pool_ns::PoolElementEvent &) {}	
//@}	
};

}	// namespace_ns

#endif	// _TWODEXPCHANNEL_H
