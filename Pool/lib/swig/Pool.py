# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Pool
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


EPSILON = _Pool.EPSILON
class StringEqualsIgnoreCase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringEqualsIgnoreCase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringEqualsIgnoreCase, name)
    __repr__ = _swig_repr
    def __call__(*args): return _Pool.StringEqualsIgnoreCase___call__(*args)
    def __init__(self, *args): 
        this = _Pool.new_StringEqualsIgnoreCase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_StringEqualsIgnoreCase
    __del__ = lambda self : None;
StringEqualsIgnoreCase_swigregister = _Pool.StringEqualsIgnoreCase_swigregister
StringEqualsIgnoreCase_swigregister(StringEqualsIgnoreCase)

doubleEqual = _Pool.doubleEqual
indentToStream = _Pool.indentToStream
get_InvalidId_str = _Pool.get_InvalidId_str
UNDEF_LANG = _Pool.UNDEF_LANG
PYTHON = _Pool.PYTHON
CPP = _Pool.CPP
UNDEF_ELEM = _Pool.UNDEF_ELEM
CTRL_ELEM = _Pool.CTRL_ELEM
MOTOR_ELEM = _Pool.MOTOR_ELEM
COTI_ELEM = _Pool.COTI_ELEM
ZEROD_ELEM = _Pool.ZEROD_ELEM
ONED_ELEM = _Pool.ONED_ELEM
TWOD_ELEM = _Pool.TWOD_ELEM
COM_ELEM = _Pool.COM_ELEM
IOREGISTER_ELEM = _Pool.IOREGISTER_ELEM
PSEUDO_MOTOR_ELEM = _Pool.PSEUDO_MOTOR_ELEM
PSEUDO_COUNTER_ELEM = _Pool.PSEUDO_COUNTER_ELEM
CONSTRAINT_ELEM = _Pool.CONSTRAINT_ELEM
MOTOR_GROUP_ELEM = _Pool.MOTOR_GROUP_ELEM
MEASUREMENT_GROUP_ELEM = _Pool.MEASUREMENT_GROUP_ELEM
numElementType = _Pool.numElementType
UNDEF_CTRL = _Pool.UNDEF_CTRL
PSEUDO_MOTOR_CTRL = _Pool.PSEUDO_MOTOR_CTRL
MOTOR_CTRL = _Pool.MOTOR_CTRL
COTI_CTRL = _Pool.COTI_CTRL
ZEROD_CTRL = _Pool.ZEROD_CTRL
ONED_CTRL = _Pool.ONED_CTRL
TWOD_CTRL = _Pool.TWOD_CTRL
PSEUDO_COUNTER_CTRL = _Pool.PSEUDO_COUNTER_CTRL
COM_CTRL = _Pool.COM_CTRL
IOREGISTER_CTRL = _Pool.IOREGISTER_CTRL
CONSTRAINT_CTRL = _Pool.CONSTRAINT_CTRL
MOTOR_GROUP_CTRL = _Pool.MOTOR_GROUP_CTRL
MEASUREMENT_GROUP_CTRL = _Pool.MEASUREMENT_GROUP_CTRL
numCtrlType = _Pool.numCtrlType
AVERAGE = _Pool.AVERAGE
SUM = _Pool.SUM
INTEGRAL = _Pool.INTEGRAL
NO_COMPUTATION = _Pool.NO_COMPUTATION
ONE_SHOT = _Pool.ONE_SHOT
numCumType = _Pool.numCumType
aqNone = _Pool.aqNone
aqTimer = _Pool.aqTimer
aqMonitor = _Pool.aqMonitor
numAqMode = _Pool.numAqMode
MOTOR = _Pool.MOTOR
GROUP = _Pool.GROUP
PSEUDO_MOTOR = _Pool.PSEUDO_MOTOR
ANY_CHANNEL = _Pool.ANY_CHANNEL
CT_EXP_CHANNEL = _Pool.CT_EXP_CHANNEL
ZEROD_EXP_CHANNEL = _Pool.ZEROD_EXP_CHANNEL
ONED_EXP_CHANNEL = _Pool.ONED_EXP_CHANNEL
TWOD_EXP_CHANNEL = _Pool.TWOD_EXP_CHANNEL
PSEUDO_EXP_CHANNEL = _Pool.PSEUDO_EXP_CHANNEL
MOTOR_CHANNEL = _Pool.MOTOR_CHANNEL
ON = _Pool.ON
OFF = _Pool.OFF
CLOSE = _Pool.CLOSE
OPEN = _Pool.OPEN
INSERT = _Pool.INSERT
EXTRACT = _Pool.EXTRACT
MOVING = _Pool.MOVING
STANDBY = _Pool.STANDBY
FAULT = _Pool.FAULT
INIT = _Pool.INIT
RUNNING = _Pool.RUNNING
ALARM = _Pool.ALARM
DISABLE = _Pool.DISABLE
UNKNOWN = _Pool.UNKNOWN
BOOLEAN = _Pool.BOOLEAN
LONG = _Pool.LONG
DOUBLE = _Pool.DOUBLE
STRING = _Pool.STRING
READ = _Pool.READ
READ_WRITE = _Pool.READ_WRITE
class PoolExtraAttr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolExtraAttr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolExtraAttr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ExtraAttr_name"] = _Pool.PoolExtraAttr_ExtraAttr_name_set
    __swig_getmethods__["ExtraAttr_name"] = _Pool.PoolExtraAttr_ExtraAttr_name_get
    if _newclass:ExtraAttr_name = _swig_property(_Pool.PoolExtraAttr_ExtraAttr_name_get, _Pool.PoolExtraAttr_ExtraAttr_name_set)
    __swig_setmethods__["ExtraAttr_data_type"] = _Pool.PoolExtraAttr_ExtraAttr_data_type_set
    __swig_getmethods__["ExtraAttr_data_type"] = _Pool.PoolExtraAttr_ExtraAttr_data_type_get
    if _newclass:ExtraAttr_data_type = _swig_property(_Pool.PoolExtraAttr_ExtraAttr_data_type_get, _Pool.PoolExtraAttr_ExtraAttr_data_type_set)
    __swig_setmethods__["ExtraAttr_write_type"] = _Pool.PoolExtraAttr_ExtraAttr_write_type_set
    __swig_getmethods__["ExtraAttr_write_type"] = _Pool.PoolExtraAttr_ExtraAttr_write_type_get
    if _newclass:ExtraAttr_write_type = _swig_property(_Pool.PoolExtraAttr_ExtraAttr_write_type_get, _Pool.PoolExtraAttr_ExtraAttr_write_type_set)
    def __init__(self, *args): 
        this = _Pool.new_PoolExtraAttr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolExtraAttr
    __del__ = lambda self : None;
PoolExtraAttr_swigregister = _Pool.PoolExtraAttr_swigregister
PoolExtraAttr_swigregister(PoolExtraAttr)
cvar = _Pool.cvar
CTRL_MAXDEVICE_NOTDEF = cvar.CTRL_MAXDEVICE_NOTDEF
InvalidId = cvar.InvalidId
LanguageStr = cvar.LanguageStr
ElementTypeStr = cvar.ElementTypeStr
CtrlTypeStr = cvar.CtrlTypeStr
PoolStateName = cvar.PoolStateName

class PoolError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reason"] = _Pool.PoolError_reason_set
    __swig_getmethods__["reason"] = _Pool.PoolError_reason_get
    if _newclass:reason = _swig_property(_Pool.PoolError_reason_get, _Pool.PoolError_reason_set)
    __swig_setmethods__["desc"] = _Pool.PoolError_desc_set
    __swig_getmethods__["desc"] = _Pool.PoolError_desc_get
    if _newclass:desc = _swig_property(_Pool.PoolError_desc_get, _Pool.PoolError_desc_set)
    __swig_setmethods__["origin"] = _Pool.PoolError_origin_set
    __swig_getmethods__["origin"] = _Pool.PoolError_origin_get
    if _newclass:origin = _swig_property(_Pool.PoolError_origin_get, _Pool.PoolError_origin_set)
    def __init__(self, *args): 
        this = _Pool.new_PoolError(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolError
    __del__ = lambda self : None;
PoolError_swigregister = _Pool.PoolError_swigregister
PoolError_swigregister(PoolError)

class PoolFailed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolFailed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolFailed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["errors"] = _Pool.PoolFailed_errors_set
    __swig_getmethods__["errors"] = _Pool.PoolFailed_errors_get
    if _newclass:errors = _swig_property(_Pool.PoolFailed_errors_get, _Pool.PoolFailed_errors_set)
    def __init__(self, *args): 
        this = _Pool.new_PoolFailed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolFailed
    __del__ = lambda self : None;
PoolFailed_swigregister = _Pool.PoolFailed_swigregister
PoolFailed_swigregister(PoolFailed)

class PoolThrower(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolThrower, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolThrower, name)
    __repr__ = _swig_repr
    def throw_exception(*args): return _Pool.PoolThrower_throw_exception(*args)
    __swig_getmethods__["print_exception"] = lambda x: _Pool.PoolThrower_print_exception
    if _newclass:print_exception = staticmethod(_Pool.PoolThrower_print_exception)
    def __init__(self, *args): 
        this = _Pool.new_PoolThrower(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolThrower
    __del__ = lambda self : None;
PoolThrower_swigregister = _Pool.PoolThrower_swigregister
PoolThrower_swigregister(PoolThrower)
PoolThrower_print_exception = _Pool.PoolThrower_print_exception

StateChange = _Pool.StateChange
ElementStructureChange = _Pool.ElementStructureChange
ElementListChange = _Pool.ElementListChange
PositionChange = _Pool.PositionChange
PositionArrayChange = _Pool.PositionArrayChange
CTValueChange = _Pool.CTValueChange
ZeroDValueChange = _Pool.ZeroDValueChange
OneDValueChange = _Pool.OneDValueChange
TwoDValueChange = _Pool.TwoDValueChange
PseudoCoValueChange = _Pool.PseudoCoValueChange
MotionEnded = _Pool.MotionEnded
class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _Pool.Value_value_set
    __swig_getmethods__["value"] = _Pool.Value_value_get
    if _newclass:value = _swig_property(_Pool.Value_value_get, _Pool.Value_value_set)
    __swig_setmethods__["position"] = _Pool.Value_position_set
    __swig_getmethods__["position"] = _Pool.Value_position_get
    if _newclass:position = _swig_property(_Pool.Value_position_get, _Pool.Value_position_set)
    __swig_setmethods__["position_array"] = _Pool.Value_position_array_set
    __swig_getmethods__["position_array"] = _Pool.Value_position_array_get
    if _newclass:position_array = _swig_property(_Pool.Value_position_array_get, _Pool.Value_position_array_set)
    __swig_setmethods__["state"] = _Pool.Value_state_set
    __swig_getmethods__["state"] = _Pool.Value_state_get
    if _newclass:state = _swig_property(_Pool.Value_state_get, _Pool.Value_state_set)
    def __init__(self, *args): 
        this = _Pool.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_Value
    __del__ = lambda self : None;
Value_swigregister = _Pool.Value_swigregister
Value_swigregister(Value)

class PoolElementEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolElementEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolElementEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _Pool.PoolElementEvent_type_set
    __swig_getmethods__["type"] = _Pool.PoolElementEvent_type_get
    if _newclass:type = _swig_property(_Pool.PoolElementEvent_type_get, _Pool.PoolElementEvent_type_set)
    __swig_setmethods__["src"] = _Pool.PoolElementEvent_src_set
    __swig_getmethods__["src"] = _Pool.PoolElementEvent_src_get
    if _newclass:src = _swig_property(_Pool.PoolElementEvent_src_get, _Pool.PoolElementEvent_src_set)
    __swig_setmethods__["dim"] = _Pool.PoolElementEvent_dim_set
    __swig_getmethods__["dim"] = _Pool.PoolElementEvent_dim_get
    if _newclass:dim = _swig_property(_Pool.PoolElementEvent_dim_get, _Pool.PoolElementEvent_dim_set)
    __swig_setmethods__["priority"] = _Pool.PoolElementEvent_priority_set
    __swig_getmethods__["priority"] = _Pool.PoolElementEvent_priority_get
    if _newclass:priority = _swig_property(_Pool.PoolElementEvent_priority_get, _Pool.PoolElementEvent_priority_set)
    __swig_setmethods__["old"] = _Pool.PoolElementEvent_old_set
    __swig_getmethods__["old"] = _Pool.PoolElementEvent_old_get
    if _newclass:old = _swig_property(_Pool.PoolElementEvent_old_get, _Pool.PoolElementEvent_old_set)
    __swig_setmethods__["curr"] = _Pool.PoolElementEvent_curr_set
    __swig_getmethods__["curr"] = _Pool.PoolElementEvent_curr_get
    if _newclass:curr = _swig_property(_Pool.PoolElementEvent_curr_get, _Pool.PoolElementEvent_curr_set)
    def __init__(self, *args): 
        this = _Pool.new_PoolElementEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def printToStream(*args): return _Pool.PoolElementEvent_printToStream(*args)
    __swig_destroy__ = _Pool.delete_PoolElementEvent
    __del__ = lambda self : None;
PoolElementEvent_swigregister = _Pool.PoolElementEvent_swigregister
PoolElementEvent_swigregister(PoolElementEvent)

class IPoolElementListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPoolElementListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPoolElementListener, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def pool_elem_changed(*args): return _Pool.IPoolElementListener_pool_elem_changed(*args)
    __swig_destroy__ = _Pool.delete_IPoolElementListener
    __del__ = lambda self : None;
IPoolElementListener_swigregister = _Pool.IPoolElementListener_swigregister
IPoolElementListener_swigregister(IPoolElementListener)

class DelayedEvt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DelayedEvt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DelayedEvt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src"] = _Pool.DelayedEvt_src_set
    __swig_getmethods__["src"] = _Pool.DelayedEvt_src_get
    if _newclass:src = _swig_property(_Pool.DelayedEvt_src_get, _Pool.DelayedEvt_src_set)
    __swig_setmethods__["evt"] = _Pool.DelayedEvt_evt_set
    __swig_getmethods__["evt"] = _Pool.DelayedEvt_evt_get
    if _newclass:evt = _swig_property(_Pool.DelayedEvt_evt_get, _Pool.DelayedEvt_evt_set)
    __swig_setmethods__["exception"] = _Pool.DelayedEvt_exception_set
    __swig_getmethods__["exception"] = _Pool.DelayedEvt_exception_get
    if _newclass:exception = _swig_property(_Pool.DelayedEvt_exception_get, _Pool.DelayedEvt_exception_set)
    def __init__(self, *args): 
        this = _Pool.new_DelayedEvt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_DelayedEvt
    __del__ = lambda self : None;
DelayedEvt_swigregister = _Pool.DelayedEvt_swigregister
DelayedEvt_swigregister(DelayedEvt)

class PoolElement(IPoolElementListener):
    __swig_setmethods__ = {}
    for _s in [IPoolElementListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolElement, name, value)
    __swig_getmethods__ = {}
    for _s in [IPoolElementListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoolElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _Pool.PoolElement_id_set
    __swig_getmethods__["id"] = _Pool.PoolElement_id_get
    if _newclass:id = _swig_property(_Pool.PoolElement_id_get, _Pool.PoolElement_id_set)
    __swig_setmethods__["name"] = _Pool.PoolElement_name_set
    __swig_getmethods__["name"] = _Pool.PoolElement_name_get
    if _newclass:name = _swig_property(_Pool.PoolElement_name_get, _Pool.PoolElement_name_set)
    __swig_setmethods__["full_name"] = _Pool.PoolElement_full_name_set
    __swig_getmethods__["full_name"] = _Pool.PoolElement_full_name_get
    if _newclass:full_name = _swig_property(_Pool.PoolElement_full_name_get, _Pool.PoolElement_full_name_set)
    __swig_setmethods__["user_full_name"] = _Pool.PoolElement_user_full_name_set
    __swig_getmethods__["user_full_name"] = _Pool.PoolElement_user_full_name_get
    if _newclass:user_full_name = _swig_property(_Pool.PoolElement_user_full_name_get, _Pool.PoolElement_user_full_name_set)
    __swig_setmethods__["axis"] = _Pool.PoolElement_axis_set
    __swig_getmethods__["axis"] = _Pool.PoolElement_axis_get
    if _newclass:axis = _swig_property(_Pool.PoolElement_axis_get, _Pool.PoolElement_axis_set)
    __swig_setmethods__["ctrl_id"] = _Pool.PoolElement_ctrl_id_set
    __swig_getmethods__["ctrl_id"] = _Pool.PoolElement_ctrl_id_get
    if _newclass:ctrl_id = _swig_property(_Pool.PoolElement_ctrl_id_get, _Pool.PoolElement_ctrl_id_set)
    __swig_setmethods__["pool_elem_listeners"] = _Pool.PoolElement_pool_elem_listeners_set
    __swig_getmethods__["pool_elem_listeners"] = _Pool.PoolElement_pool_elem_listeners_get
    if _newclass:pool_elem_listeners = _swig_property(_Pool.PoolElement_pool_elem_listeners_get, _Pool.PoolElement_pool_elem_listeners_set)
    __swig_setmethods__["helper"] = _Pool.PoolElement_helper_set
    __swig_getmethods__["helper"] = _Pool.PoolElement_helper_get
    if _newclass:helper = _swig_property(_Pool.PoolElement_helper_get, _Pool.PoolElement_helper_set)
    def get_id(*args): return _Pool.PoolElement_get_id(*args)
    def get_name(*args): return _Pool.PoolElement_get_name(*args)
    def get_full_name(*args): return _Pool.PoolElement_get_full_name(*args)
    def get_user_full_name(*args): return _Pool.PoolElement_get_user_full_name(*args)
    def get_axis(*args): return _Pool.PoolElement_get_axis(*args)
    def get_ctrl_id(*args): return _Pool.PoolElement_get_ctrl_id(*args)
    def add_pool_elem_listener(*args): return _Pool.PoolElement_add_pool_elem_listener(*args)
    def remove_pool_elem_listener(*args): return _Pool.PoolElement_remove_pool_elem_listener(*args)
    def has_listeners(*args): return _Pool.PoolElement_has_listeners(*args)
    def propagate_event(*args): return _Pool.PoolElement_propagate_event(*args)
    def get_type(*args): return _Pool.PoolElement_get_type(*args)
    def is_member(*args): return _Pool.PoolElement_is_member(*args)
    def get_elems(*args): return _Pool.PoolElement_get_elems(*args)
    def pool_elem_changed(*args): return _Pool.PoolElement_pool_elem_changed(*args)
    def fire_pool_elem_change(*args): return _Pool.PoolElement_fire_pool_elem_change(*args)
    def __init__(self, *args): 
        this = _Pool.new_PoolElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolElement
    __del__ = lambda self : None;
PoolElement_swigregister = _Pool.PoolElement_swigregister
PoolElement_swigregister(PoolElement)

class PoolElementProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolElementProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolElementProxy, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def pool_elem_changed(*args): return _Pool.PoolElementProxy_pool_elem_changed(*args)
    __swig_destroy__ = _Pool.delete_PoolElementProxy
    __del__ = lambda self : None;
PoolElementProxy_swigregister = _Pool.PoolElementProxy_swigregister
PoolElementProxy_swigregister(PoolElementProxy)

class DValuablePoolElement(PoolElement):
    __swig_setmethods__ = {}
    for _s in [PoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DValuablePoolElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DValuablePoolElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Pool.new_DValuablePoolElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_DValuablePoolElement
    __del__ = lambda self : None;
DValuablePoolElement_swigregister = _Pool.DValuablePoolElement_swigregister
DValuablePoolElement_swigregister(DValuablePoolElement)

class IValuablePoolElement(PoolElement):
    __swig_setmethods__ = {}
    for _s in [PoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IValuablePoolElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IValuablePoolElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Pool.new_IValuablePoolElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_IValuablePoolElement
    __del__ = lambda self : None;
IValuablePoolElement_swigregister = _Pool.IValuablePoolElement_swigregister
IValuablePoolElement_swigregister(IValuablePoolElement)

class ControllerPool(PoolElement):
    __swig_setmethods__ = {}
    for _s in [PoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ControllerPool, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ControllerPool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctrl"] = _Pool.ControllerPool_ctrl_set
    __swig_getmethods__["ctrl"] = _Pool.ControllerPool_ctrl_get
    if _newclass:ctrl = _swig_property(_Pool.ControllerPool_ctrl_get, _Pool.ControllerPool_ctrl_set)
    __swig_setmethods__["cpp_ctrl_prop"] = _Pool.ControllerPool_cpp_ctrl_prop_set
    __swig_getmethods__["cpp_ctrl_prop"] = _Pool.ControllerPool_cpp_ctrl_prop_get
    if _newclass:cpp_ctrl_prop = _swig_property(_Pool.ControllerPool_cpp_ctrl_prop_get, _Pool.ControllerPool_cpp_ctrl_prop_set)
    __swig_setmethods__["ctrl_fica_built"] = _Pool.ControllerPool_ctrl_fica_built_set
    __swig_getmethods__["ctrl_fica_built"] = _Pool.ControllerPool_ctrl_fica_built_get
    if _newclass:ctrl_fica_built = _swig_property(_Pool.ControllerPool_ctrl_fica_built_get, _Pool.ControllerPool_ctrl_fica_built_set)
    __swig_setmethods__["ite_ctrl_fica"] = _Pool.ControllerPool_ite_ctrl_fica_set
    __swig_getmethods__["ite_ctrl_fica"] = _Pool.ControllerPool_ite_ctrl_fica_get
    if _newclass:ite_ctrl_fica = _swig_property(_Pool.ControllerPool_ite_ctrl_fica_get, _Pool.ControllerPool_ite_ctrl_fica_set)
    __swig_setmethods__["ctrl_class_name"] = _Pool.ControllerPool_ctrl_class_name_set
    __swig_getmethods__["ctrl_class_name"] = _Pool.ControllerPool_ctrl_class_name_get
    if _newclass:ctrl_class_name = _swig_property(_Pool.ControllerPool_ctrl_class_name_get, _Pool.ControllerPool_ctrl_class_name_set)
    __swig_setmethods__["ctrl_fica_name"] = _Pool.ControllerPool_ctrl_fica_name_set
    __swig_getmethods__["ctrl_fica_name"] = _Pool.ControllerPool_ctrl_fica_name_get
    if _newclass:ctrl_fica_name = _swig_property(_Pool.ControllerPool_ctrl_fica_name_get, _Pool.ControllerPool_ctrl_fica_name_set)
    __swig_setmethods__["MaxDevice"] = _Pool.ControllerPool_MaxDevice_set
    __swig_getmethods__["MaxDevice"] = _Pool.ControllerPool_MaxDevice_get
    if _newclass:MaxDevice = _swig_property(_Pool.ControllerPool_MaxDevice_get, _Pool.ControllerPool_MaxDevice_set)
    __swig_setmethods__["nb_dev"] = _Pool.ControllerPool_nb_dev_set
    __swig_getmethods__["nb_dev"] = _Pool.ControllerPool_nb_dev_get
    if _newclass:nb_dev = _swig_property(_Pool.ControllerPool_nb_dev_get, _Pool.ControllerPool_nb_dev_set)
    __swig_setmethods__["error_status"] = _Pool.ControllerPool_error_status_set
    __swig_getmethods__["error_status"] = _Pool.ControllerPool_error_status_get
    if _newclass:error_status = _swig_property(_Pool.ControllerPool_error_status_get, _Pool.ControllerPool_error_status_set)
    def __init__(self, *args): 
        this = _Pool.new_ControllerPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_ControllerPool
    __del__ = lambda self : None;
    def get_ctrl_file_ptr(*args): return _Pool.ControllerPool_get_ctrl_file_ptr(*args)
    def get_ctrl_file(*args): return _Pool.ControllerPool_get_ctrl_file(*args)
    def get_ctrl_fica_mon(*args): return _Pool.ControllerPool_get_ctrl_fica_mon(*args)
    def get_ctrl_obj_type(*args): return _Pool.ControllerPool_get_ctrl_obj_type(*args)
    def get_fica_name(*args): return _Pool.ControllerPool_get_fica_name(*args)
    def get_language(*args): return _Pool.ControllerPool_get_language(*args)
    def get_f_name(*args): return _Pool.ControllerPool_get_f_name(*args)
    def get_path(*args): return _Pool.ControllerPool_get_path(*args)
    def get_lib_ptr(*args): return _Pool.ControllerPool_get_lib_ptr(*args)
    def get_py_inter_lib_ptr(*args): return _Pool.ControllerPool_get_py_inter_lib_ptr(*args)
    def get_py_module(*args): return _Pool.ControllerPool_get_py_module(*args)
    def reload(*args): return _Pool.ControllerPool_reload(*args)
    def get_type(*args): return _Pool.ControllerPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.ControllerPool_pool_elem_changed(*args)
ControllerPool_swigregister = _Pool.ControllerPool_swigregister
ControllerPool_swigregister(ControllerPool)

class PoolMoveable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolMoveable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolMoveable, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["_moveables"] = _Pool.PoolMoveable__moveables_set
    __swig_getmethods__["_moveables"] = _Pool.PoolMoveable__moveables_get
    if _newclass:_moveables = _swig_property(_Pool.PoolMoveable__moveables_get, _Pool.PoolMoveable__moveables_set)
    def calc_move(*args): return _Pool.PoolMoveable_calc_move(*args)
    def get_size(*args): return _Pool.PoolMoveable_get_size(*args)
    __swig_destroy__ = _Pool.delete_PoolMoveable
    __del__ = lambda self : None;
PoolMoveable_swigregister = _Pool.PoolMoveable_swigregister
PoolMoveable_swigregister(PoolMoveable)

class MotorPool(DValuablePoolElement,PoolMoveable):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement,PoolMoveable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MotorPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement,PoolMoveable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MotorPool, name)
    __repr__ = _swig_repr
    def get_type(*args): return _Pool.MotorPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.MotorPool_pool_elem_changed(*args)
    def calc_move(*args): return _Pool.MotorPool_calc_move(*args)
    def __init__(self, *args): 
        this = _Pool.new_MotorPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_MotorPool
    __del__ = lambda self : None;
MotorPool_swigregister = _Pool.MotorPool_swigregister
MotorPool_swigregister(MotorPool)

class CommunicationChannelPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommunicationChannelPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommunicationChannelPool, name)
    __repr__ = _swig_repr
    def get_type(*args): return _Pool.CommunicationChannelPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.CommunicationChannelPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_CommunicationChannelPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_CommunicationChannelPool
    __del__ = lambda self : None;
CommunicationChannelPool_swigregister = _Pool.CommunicationChannelPool_swigregister
CommunicationChannelPool_swigregister(CommunicationChannelPool)

class CTExpChannelPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTExpChannelPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CTExpChannelPool, name)
    __repr__ = _swig_repr
    def get_type(*args): return _Pool.CTExpChannelPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.CTExpChannelPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_CTExpChannelPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_CTExpChannelPool
    __del__ = lambda self : None;
CTExpChannelPool_swigregister = _Pool.CTExpChannelPool_swigregister
CTExpChannelPool_swigregister(CTExpChannelPool)

class MeasurementGroupPool(PoolElement):
    __swig_setmethods__ = {}
    for _s in [PoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeasurementGroupPool, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeasurementGroupPool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ch_ids"] = _Pool.MeasurementGroupPool_ch_ids_set
    __swig_getmethods__["ch_ids"] = _Pool.MeasurementGroupPool_ch_ids_get
    if _newclass:ch_ids = _swig_property(_Pool.MeasurementGroupPool_ch_ids_get, _Pool.MeasurementGroupPool_ch_ids_set)
    __swig_setmethods__["group_elts"] = _Pool.MeasurementGroupPool_group_elts_set
    __swig_getmethods__["group_elts"] = _Pool.MeasurementGroupPool_group_elts_get
    if _newclass:group_elts = _swig_property(_Pool.MeasurementGroupPool_group_elts_get, _Pool.MeasurementGroupPool_group_elts_set)
    def get_type(*args): return _Pool.MeasurementGroupPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.MeasurementGroupPool_pool_elem_changed(*args)
    def is_member(*args): return _Pool.MeasurementGroupPool_is_member(*args)
    def get_elems(*args): return _Pool.MeasurementGroupPool_get_elems(*args)
    def __init__(self, *args): 
        this = _Pool.new_MeasurementGroupPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_MeasurementGroupPool
    __del__ = lambda self : None;
MeasurementGroupPool_swigregister = _Pool.MeasurementGroupPool_swigregister
MeasurementGroupPool_swigregister(MeasurementGroupPool)

class PseudoMotorPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoMotorPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoMotorPool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mot_elts"] = _Pool.PseudoMotorPool_mot_elts_set
    __swig_getmethods__["mot_elts"] = _Pool.PseudoMotorPool_mot_elts_get
    if _newclass:mot_elts = _swig_property(_Pool.PseudoMotorPool_mot_elts_get, _Pool.PseudoMotorPool_mot_elts_set)
    __swig_setmethods__["user_full_name_extra"] = _Pool.PseudoMotorPool_user_full_name_extra_set
    __swig_getmethods__["user_full_name_extra"] = _Pool.PseudoMotorPool_user_full_name_extra_get
    if _newclass:user_full_name_extra = _swig_property(_Pool.PseudoMotorPool_user_full_name_extra_get, _Pool.PseudoMotorPool_user_full_name_extra_set)
    __swig_setmethods__["motor_group_id"] = _Pool.PseudoMotorPool_motor_group_id_set
    __swig_getmethods__["motor_group_id"] = _Pool.PseudoMotorPool_motor_group_id_get
    if _newclass:motor_group_id = _swig_property(_Pool.PseudoMotorPool_motor_group_id_get, _Pool.PseudoMotorPool_motor_group_id_set)
    def get_type(*args): return _Pool.PseudoMotorPool_get_type(*args)
    def get_motor_group_id(*args): return _Pool.PseudoMotorPool_get_motor_group_id(*args)
    def pool_elem_changed(*args): return _Pool.PseudoMotorPool_pool_elem_changed(*args)
    def is_member(*args): return _Pool.PseudoMotorPool_is_member(*args)
    def get_elems(*args): return _Pool.PseudoMotorPool_get_elems(*args)
    def __init__(self, *args): 
        this = _Pool.new_PseudoMotorPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PseudoMotorPool
    __del__ = lambda self : None;
PseudoMotorPool_swigregister = _Pool.PseudoMotorPool_swigregister
PseudoMotorPool_swigregister(PseudoMotorPool)

class MotorGroupPool(PoolElement,PoolMoveable):
    __swig_setmethods__ = {}
    for _s in [PoolElement,PoolMoveable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MotorGroupPool, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElement,PoolMoveable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MotorGroupPool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mot_ids"] = _Pool.MotorGroupPool_mot_ids_set
    __swig_getmethods__["mot_ids"] = _Pool.MotorGroupPool_mot_ids_get
    if _newclass:mot_ids = _swig_property(_Pool.MotorGroupPool_mot_ids_get, _Pool.MotorGroupPool_mot_ids_set)
    __swig_setmethods__["mot_elts"] = _Pool.MotorGroupPool_mot_elts_set
    __swig_getmethods__["mot_elts"] = _Pool.MotorGroupPool_mot_elts_get
    if _newclass:mot_elts = _swig_property(_Pool.MotorGroupPool_mot_elts_get, _Pool.MotorGroupPool_mot_elts_set)
    __swig_setmethods__["pm_elts"] = _Pool.MotorGroupPool_pm_elts_set
    __swig_getmethods__["pm_elts"] = _Pool.MotorGroupPool_pm_elts_get
    if _newclass:pm_elts = _swig_property(_Pool.MotorGroupPool_pm_elts_get, _Pool.MotorGroupPool_pm_elts_set)
    __swig_setmethods__["mg_elts"] = _Pool.MotorGroupPool_mg_elts_set
    __swig_getmethods__["mg_elts"] = _Pool.MotorGroupPool_mg_elts_get
    if _newclass:mg_elts = _swig_property(_Pool.MotorGroupPool_mg_elts_get, _Pool.MotorGroupPool_mg_elts_set)
    __swig_setmethods__["group_elts"] = _Pool.MotorGroupPool_group_elts_set
    __swig_getmethods__["group_elts"] = _Pool.MotorGroupPool_group_elts_get
    if _newclass:group_elts = _swig_property(_Pool.MotorGroupPool_group_elts_get, _Pool.MotorGroupPool_group_elts_set)
    def get_type(*args): return _Pool.MotorGroupPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.MotorGroupPool_pool_elem_changed(*args)
    def is_member(*args): return _Pool.MotorGroupPool_is_member(*args)
    def is_user_member(*args): return _Pool.MotorGroupPool_is_user_member(*args)
    def get_elems(*args): return _Pool.MotorGroupPool_get_elems(*args)
    def calc_move(*args): return _Pool.MotorGroupPool_calc_move(*args)
    def get_size(*args): return _Pool.MotorGroupPool_get_size(*args)
    def __init__(self, *args): 
        this = _Pool.new_MotorGroupPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_MotorGroupPool
    __del__ = lambda self : None;
MotorGroupPool_swigregister = _Pool.MotorGroupPool_swigregister
MotorGroupPool_swigregister(MotorGroupPool)

class PseudoCounterPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PseudoCounterPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PseudoCounterPool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ch_elts"] = _Pool.PseudoCounterPool_ch_elts_set
    __swig_getmethods__["ch_elts"] = _Pool.PseudoCounterPool_ch_elts_get
    if _newclass:ch_elts = _swig_property(_Pool.PseudoCounterPool_ch_elts_get, _Pool.PseudoCounterPool_ch_elts_set)
    __swig_setmethods__["user_full_name_extra"] = _Pool.PseudoCounterPool_user_full_name_extra_set
    __swig_getmethods__["user_full_name_extra"] = _Pool.PseudoCounterPool_user_full_name_extra_get
    if _newclass:user_full_name_extra = _swig_property(_Pool.PseudoCounterPool_user_full_name_extra_get, _Pool.PseudoCounterPool_user_full_name_extra_set)
    def get_type(*args): return _Pool.PseudoCounterPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.PseudoCounterPool_pool_elem_changed(*args)
    def is_member(*args): return _Pool.PseudoCounterPool_is_member(*args)
    def get_elems(*args): return _Pool.PseudoCounterPool_get_elems(*args)
    def __init__(self, *args): 
        this = _Pool.new_PseudoCounterPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PseudoCounterPool
    __del__ = lambda self : None;
PseudoCounterPool_swigregister = _Pool.PseudoCounterPool_swigregister
PseudoCounterPool_swigregister(PseudoCounterPool)

class ZeroDExpChannelPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroDExpChannelPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroDExpChannelPool, name)
    __repr__ = _swig_repr
    def get_type(*args): return _Pool.ZeroDExpChannelPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.ZeroDExpChannelPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_ZeroDExpChannelPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_ZeroDExpChannelPool
    __del__ = lambda self : None;
ZeroDExpChannelPool_swigregister = _Pool.ZeroDExpChannelPool_swigregister
ZeroDExpChannelPool_swigregister(ZeroDExpChannelPool)

class OneDExpChannelPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneDExpChannelPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OneDExpChannelPool, name)
    __repr__ = _swig_repr
    def pool_elem_changed(*args): return _Pool.OneDExpChannelPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_OneDExpChannelPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_OneDExpChannelPool
    __del__ = lambda self : None;
OneDExpChannelPool_swigregister = _Pool.OneDExpChannelPool_swigregister
OneDExpChannelPool_swigregister(OneDExpChannelPool)

class TwoDExpChannelPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoDExpChannelPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TwoDExpChannelPool, name)
    __repr__ = _swig_repr
    def pool_elem_changed(*args): return _Pool.TwoDExpChannelPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_TwoDExpChannelPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_TwoDExpChannelPool
    __del__ = lambda self : None;
TwoDExpChannelPool_swigregister = _Pool.TwoDExpChannelPool_swigregister
TwoDExpChannelPool_swigregister(TwoDExpChannelPool)

class IORegisterPool(DValuablePoolElement):
    __swig_setmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IORegisterPool, name, value)
    __swig_getmethods__ = {}
    for _s in [DValuablePoolElement]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IORegisterPool, name)
    __repr__ = _swig_repr
    def get_type(*args): return _Pool.IORegisterPool_get_type(*args)
    def pool_elem_changed(*args): return _Pool.IORegisterPool_pool_elem_changed(*args)
    def __init__(self, *args): 
        this = _Pool.new_IORegisterPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_IORegisterPool
    __del__ = lambda self : None;
IORegisterPool_swigregister = _Pool.IORegisterPool_swigregister
IORegisterPool_swigregister(IORegisterPool)

class PoolElementContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolElementContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolElementContainer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Pool.new_PoolElementContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_PoolElementContainer
    __del__ = lambda self : None;
    def get_element(*args): return _Pool.PoolElementContainer_get_element(*args)
    def get_element_nb(*args): return _Pool.PoolElementContainer_get_element_nb(*args)
    def get_element_id_map(*args): return _Pool.PoolElementContainer_get_element_id_map(*args)
    def get_element_name_map(*args): return _Pool.PoolElementContainer_get_element_name_map(*args)
    def get_element_type_map(*args): return _Pool.PoolElementContainer_get_element_type_map(*args)
    def get_all_elements(*args): return _Pool.PoolElementContainer_get_all_elements(*args)
    def get_range(*args): return _Pool.PoolElementContainer_get_range(*args)
    def element_exists(*args): return _Pool.PoolElementContainer_element_exists(*args)
PoolElementContainer_swigregister = _Pool.PoolElementContainer_swigregister
PoolElementContainer_swigregister(PoolElementContainer)

class DevicePool(PoolElementContainer):
    __swig_setmethods__ = {}
    for _s in [PoolElementContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DevicePool, name, value)
    __swig_getmethods__ = {}
    for _s in [PoolElementContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DevicePool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Pool.new_DevicePool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Pool.delete_DevicePool
    __del__ = lambda self : None;
    def get_new_id(*args): return _Pool.DevicePool_get_new_id(*args)
    def get_last_assigned_id(*args): return _Pool.DevicePool_get_last_assigned_id(*args)
    def reserve_id(*args): return _Pool.DevicePool_reserve_id(*args)
    def get_new_ghost_id(*args): return _Pool.DevicePool_get_new_ghost_id(*args)
    def get_last_assigned_ghost_id(*args): return _Pool.DevicePool_get_last_assigned_ghost_id(*args)
    def reserve_ghost_id(*args): return _Pool.DevicePool_reserve_ghost_id(*args)
    def to_version_nb(*args): return _Pool.DevicePool_to_version_nb(*args)
    def get_version_str(*args): return _Pool.DevicePool_get_version_str(*args)
    def get_version_nb(*args): return _Pool.DevicePool_get_version_nb(*args)
    def get_controller(*args): return _Pool.DevicePool_get_controller(*args)
    def get_controller_from_element(*args): return _Pool.DevicePool_get_controller_from_element(*args)
    def get_controller_nb_by_fica_name(*args): return _Pool.DevicePool_get_controller_nb_by_fica_name(*args)
    def get_physical_motor(*args): return _Pool.DevicePool_get_physical_motor(*args)
    def get_pseudo_motor(*args): return _Pool.DevicePool_get_pseudo_motor(*args)
    def get_motor(*args): return _Pool.DevicePool_get_motor(*args)
    def get_motor_group(*args): return _Pool.DevicePool_get_motor_group(*args)
    def get_countertimer(*args): return _Pool.DevicePool_get_countertimer(*args)
    def get_zerod(*args): return _Pool.DevicePool_get_zerod(*args)
    def get_oned(*args): return _Pool.DevicePool_get_oned(*args)
    def get_twod(*args): return _Pool.DevicePool_get_twod(*args)
    def get_pseudo_counter(*args): return _Pool.DevicePool_get_pseudo_counter(*args)
    def get_experiment_channel(*args): return _Pool.DevicePool_get_experiment_channel(*args)
    def get_measurement_group(*args): return _Pool.DevicePool_get_measurement_group(*args)
    def get_communication_channel(*args): return _Pool.DevicePool_get_communication_channel(*args)
    def get_ioregister(*args): return _Pool.DevicePool_get_ioregister(*args)
    def get_physical_element(*args): return _Pool.DevicePool_get_physical_element(*args)
    def get_pseudo_element(*args): return _Pool.DevicePool_get_pseudo_element(*args)
    def get_group_element(*args): return _Pool.DevicePool_get_group_element(*args)
    def get_controllers(*args): return _Pool.DevicePool_get_controllers(*args)
    def get_physical_motors(*args): return _Pool.DevicePool_get_physical_motors(*args)
    def get_all_controller(*args): return _Pool.DevicePool_get_all_controller(*args)
    def get_all_physical_motor(*args): return _Pool.DevicePool_get_all_physical_motor(*args)
    def get_all_pseudo_motor(*args): return _Pool.DevicePool_get_all_pseudo_motor(*args)
    def get_all_motor_group(*args): return _Pool.DevicePool_get_all_motor_group(*args)
    def get_all_countertimer(*args): return _Pool.DevicePool_get_all_countertimer(*args)
    def get_all_zerod(*args): return _Pool.DevicePool_get_all_zerod(*args)
    def get_all_oned(*args): return _Pool.DevicePool_get_all_oned(*args)
    def get_all_twod(*args): return _Pool.DevicePool_get_all_twod(*args)
    def get_all_pseudo_counter(*args): return _Pool.DevicePool_get_all_pseudo_counter(*args)
    def get_all_measurement_group(*args): return _Pool.DevicePool_get_all_measurement_group(*args)
    def get_all_communication_channel(*args): return _Pool.DevicePool_get_all_communication_channel(*args)
    def get_all_ioregister(*args): return _Pool.DevicePool_get_all_ioregister(*args)
    def get_controller_nb(*args): return _Pool.DevicePool_get_controller_nb(*args)
    def get_motor_nb(*args): return _Pool.DevicePool_get_motor_nb(*args)
    def get_physical_motor_nb(*args): return _Pool.DevicePool_get_physical_motor_nb(*args)
    def get_pseudo_motor_nb(*args): return _Pool.DevicePool_get_pseudo_motor_nb(*args)
    def get_motor_group_nb(*args): return _Pool.DevicePool_get_motor_group_nb(*args)
    def get_countertimer_nb(*args): return _Pool.DevicePool_get_countertimer_nb(*args)
    def get_zerod_nb(*args): return _Pool.DevicePool_get_zerod_nb(*args)
    def get_oned_nb(*args): return _Pool.DevicePool_get_oned_nb(*args)
    def get_twod_nb(*args): return _Pool.DevicePool_get_twod_nb(*args)
    def get_pseudo_counter_nb(*args): return _Pool.DevicePool_get_pseudo_counter_nb(*args)
    def get_measurement_group_nb(*args): return _Pool.DevicePool_get_measurement_group_nb(*args)
    def get_communication_channel_nb(*args): return _Pool.DevicePool_get_communication_channel_nb(*args)
    def get_ioregister_nb(*args): return _Pool.DevicePool_get_ioregister_nb(*args)
    def controller_exists(*args): return _Pool.DevicePool_controller_exists(*args)
    def physical_motor_exists(*args): return _Pool.DevicePool_physical_motor_exists(*args)
    def pseudo_motor_exists(*args): return _Pool.DevicePool_pseudo_motor_exists(*args)
    def motor_exists(*args): return _Pool.DevicePool_motor_exists(*args)
    def motor_group_exists(*args): return _Pool.DevicePool_motor_group_exists(*args)
    def countertimer_exists(*args): return _Pool.DevicePool_countertimer_exists(*args)
    def zerod_exists(*args): return _Pool.DevicePool_zerod_exists(*args)
    def oned_exists(*args): return _Pool.DevicePool_oned_exists(*args)
    def twod_exists(*args): return _Pool.DevicePool_twod_exists(*args)
    def pseudo_counter_exists(*args): return _Pool.DevicePool_pseudo_counter_exists(*args)
    def measurement_group_exists(*args): return _Pool.DevicePool_measurement_group_exists(*args)
    def communication_channel_exists(*args): return _Pool.DevicePool_communication_channel_exists(*args)
    def ioregister_exists(*args): return _Pool.DevicePool_ioregister_exists(*args)
    def remove_controller(*args): return _Pool.DevicePool_remove_controller(*args)
    def remove_physical_motor(*args): return _Pool.DevicePool_remove_physical_motor(*args)
    def remove_pseudo_motor(*args): return _Pool.DevicePool_remove_pseudo_motor(*args)
    def remove_motor_group(*args): return _Pool.DevicePool_remove_motor_group(*args)
    def remove_countertimer(*args): return _Pool.DevicePool_remove_countertimer(*args)
    def remove_zerod(*args): return _Pool.DevicePool_remove_zerod(*args)
    def remove_oned(*args): return _Pool.DevicePool_remove_oned(*args)
    def remove_twod(*args): return _Pool.DevicePool_remove_twod(*args)
    def remove_pseudo_counter(*args): return _Pool.DevicePool_remove_pseudo_counter(*args)
    def remove_measurement_group(*args): return _Pool.DevicePool_remove_measurement_group(*args)
    def remove_communication_channel(*args): return _Pool.DevicePool_remove_communication_channel(*args)
    def remove_ioregister(*args): return _Pool.DevicePool_remove_ioregister(*args)
    def remove_controllers(*args): return _Pool.DevicePool_remove_controllers(*args)
    def remove_physical_motors(*args): return _Pool.DevicePool_remove_physical_motors(*args)
    def remove_pseudo_motors(*args): return _Pool.DevicePool_remove_pseudo_motors(*args)
    def remove_motor_groups(*args): return _Pool.DevicePool_remove_motor_groups(*args)
    def remove_countertimers(*args): return _Pool.DevicePool_remove_countertimers(*args)
    def remove_zerods(*args): return _Pool.DevicePool_remove_zerods(*args)
    def remove_oneds(*args): return _Pool.DevicePool_remove_oneds(*args)
    def remove_twods(*args): return _Pool.DevicePool_remove_twods(*args)
    def remove_pseudo_counters(*args): return _Pool.DevicePool_remove_pseudo_counters(*args)
    def remove_measurement_groups(*args): return _Pool.DevicePool_remove_measurement_groups(*args)
    def remove_communication_channels(*args): return _Pool.DevicePool_remove_communication_channels(*args)
    def remove_ioregisters(*args): return _Pool.DevicePool_remove_ioregisters(*args)
DevicePool_swigregister = _Pool.DevicePool_swigregister
DevicePool_swigregister(DevicePool)



