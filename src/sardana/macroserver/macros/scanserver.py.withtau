"""
    Macro library containning scanserver related macros for the macros 
    server Tango device server as part of the Sardana project.
    
"""

from sardana.macroserver.macro import *

import PyTango

class _scanserver:
    """Internal class used as a base class for the scanserver macros"""

    env = ('ScanServerDevice',)
    
    
    def prepare(self):
        self.prepared = False
        
        dev_name = self.getEnv('ScanServerDevice')        
        self.scanserver = self.getDevice(dev_name)
		
        self.prepared = True

class start_scan(Macro, _scanserver):
    """The start_scan macro is used to send the command start to the ScanServer."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        self.scanserver.Start

class set_scan_sensors(Macro, _scanserver):
    """The set_scan_sensors macro is used to set the sensors in the scan server."""
    
    param_def = [
       ['sensor_1', Type.String, None, "Sensor to be added (could be a list with elements separated by ,"],
       ['sensor_2', Type.String, " ", "Sensor to be added"],
       ['sensor_3', Type.String, " ", "Sensor to be added"],
       ['sensor_4', Type.String, " ", "Sensor to be added"],
       ['sensor_5', Type.String, " ", "Sensor to be added"],
       ['sensor_6', Type.String, " ", "Sensor to be added"],
       ['sensor_7', Type.String, " ", "Sensor to be added"],
       ['sensor_8', Type.String, " ", "Sensor to be added"],
       ['sensor_9', Type.String, " ", "Sensor to be added"],
       ['sensor_10', Type.String, " ", "Sensor to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, * pars):
        if not self.prepared:
            return
        
        values = []
        for p in pars:
            sen_list = p.split(",")
            for sen in sen_list:
                if sen != " ":
                    values.append(str(sen))
        self.scanserver.write_attribute("sensors",values)
	
class get_scan_sensors(Macro, _scanserver):
    """The get_scan_sensors macro is used to read the sensors set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        sensors = self.scanserver.sensors
        self.output("Sensors:")
        for sensor in sensors:
            self.output(sensor)
		
class set_scan_actuators(Macro, _scanserver):
    """The set_scan_actuators macro is used to set the actuators in the scan server."""
    
    param_def = [
       ['actuator_1', Type.String, None, "Actuator to be added (could be a list with elements separated by ,"],
       ['actuator_2', Type.String, " ", "Actuator to be added"],
       ['actuator_3', Type.String, " ", "Actuator to be added"],
       ['actuator_4', Type.String, " ", "Actuator to be added"],
       ['actuator_5', Type.String, " ", "Actuator to be added"],
       ['actuator_6', Type.String, " ", "Actuator to be added"],
       ['actuator_7', Type.String, " ", "Actuator to be added"],
       ['actuator_8', Type.String, " ", "Actuator to be added"],
       ['actuator_9', Type.String, " ", "Actuator to be added"],
       ['actuator_10', Type.String, " ", "Actuator to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, * pars):
        if not self.prepared:
            return
        
        values = []
        for p in pars:
            act_list = p.split(",")
            for act in act_list:
                if act != " ":
                    values.append(str(act))
        self.scanserver.write_attribute("actuators",values)
	
class get_scan_actuators(Macro, _scanserver):
    """The get_scan_actuators macro is used to read the actuators set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        actuators = self.scanserver.actuators
        self.output("Actuators:")
        for actuator in actuators:
            self.output(actuator)

class set_scan_actuators2(Macro, _scanserver):
    """The set_scan_actuators2 macro is used to set the actuators2 in the scan server."""
    
    param_def = [
       ['actuator_1', Type.String, None, "Actuator to be added (could be a list with elements separated by ,"],
       ['actuator_2', Type.String, " ", "Actuator to be added"],
       ['actuator_3', Type.String, " ", "Actuator to be added"],
       ['actuator_4', Type.String, " ", "Actuator to be added"],
       ['actuator_5', Type.String, " ", "Actuator to be added"],
       ['actuator_6', Type.String, " ", "Actuator to be added"],
       ['actuator_7', Type.String, " ", "Actuator to be added"],
       ['actuator_8', Type.String, " ", "Actuator to be added"],
       ['actuator_9', Type.String, " ", "Actuator to be added"],
       ['actuator_10', Type.String, " ", "Actuator to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, * pars):
        if not self.prepared:
            return
        
        values = []
        for p in pars:
            act_list = p.split(",")
            for act in act_list:
                if act != " ":
                    values.append(str(act))
        self.scanserver.write_attribute("actuators2",values)
	
class get_scan_actuators2(Macro, _scanserver):
    """The get_scan_actuators2 macro is used to read the actuators2 set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        actuators2 = self.scanserver.actuators2
        self.output("Actuators2:")
        for actuator2 in actuators2:
            self.output(actuator2)
		
class set_scan_integrationTimes(Macro, _scanserver):
    """The set_scan_integrationTimes macro is used to set the integration times in the scan server."""
    
    param_def = [
       ['integrationtime_1', Type.String, None, "Integration Time to be added (could be a list with elements separated by ,"],
       ['integrationtime_2', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_3', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_4', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_5', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_6', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_7', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_8', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_9', Type.String, " ", "Integration Time to be added"],
       ['integrationtime_10', Type.String, " ", "Integration Time to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, * pars):
        if not self.prepared:
            return
        
        values = []
        for p in pars:
            ti = p.split(",")
            for times in ti: 
                if times != " ":
                    values.append(times)
        self.output(values)
        self.scanserver.write_attribute("integrationTimes",values)

class get_scan_integrationTimes(Macro, _scanserver):
    """The get_scan_integrationTimes macro is used to read the integration times set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        integrationTimes = self.scanserver.integrationTimes
        self.output("Integration Times:")
        for time in integrationTimes:
            self.output(time)
		
class set_scan_trajectories(Macro, _scanserver):
    """The set_scan_trajectories macro is used to set the trajectories in the scan server."""
    
    param_def = [
       ['points_in_trajectory', Type.Integer, None, "Points in trajectory"],
       ['number_of_actuators', Type.Integer, None, "Number of actuators"],
       ['trajectorypoint_1', Type.String, None, "Point to be added (could be a list separated by ,"],
       ['trajectorypoint_2', Type.String, " ", "Point to be added"],
       ['trajectorypoint_3', Type.String, " ", "Point to be added"],
       ['trajectorypoint_4', Type.String, " ", "Point to be added"],
       ['trajectorypoint_5', Type.String, " ", "Point to be added"],
       ['trajectorypoint_6', Type.String, " ", "Point to be added"],
       ['trajectorypoint_7', Type.String, " ", "Point to be added"],
       ['trajectorypoint_8', Type.String, " ", "Point to be added"],
       ['trajectorypoint_9', Type.String, " ", "Point to be added"],
       ['trajectorypoint_10', Type.String, " ", "Point to be added"],
       ['trajectorypoint_11', Type.String, " ", "Point to be added"],
       ['trajectorypoint_12', Type.String, " ", "Point to be added"],
       ['trajectorypoint_13', Type.String, " ", "Point to be added"],
       ['trajectorypoint_14', Type.String, " ", "Point to be added"],
       ['trajectorypoint_15', Type.String, " ", "Point to be added"],
       ['trajectorypoint_16', Type.String, " ", "Point to be added"],
       ['trajectorypoint_17', Type.String, " ", "Point to be added"],
       ['trajectorypoint_18', Type.String, " ", "Point to be added"],
       ['trajectorypoint_19', Type.String, " ", "Point to be added"],
       ['trajectorypoint_20', Type.String, " ", "Point to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, points_in_trajectory, number_of_actuators, * pars):
        if not self.prepared:
            return        
        values = []
        for p in pars:
            self.output(p)
            act_list = p.split(",")
            for act in act_list:
                if act != " ":
                    values.append(act)
        
        self.scanserver.write_attribute("trajectories",values,  points_in_trajectory, number_of_actuators)
		
class get_scan_trajectories(Macro, _scanserver):
    """The get_scan_trajectories macro is used to read the trajectories set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        dim_x = self.scanserver.read_attribute("trajectories").dim_x
        if dim_x > 0:        
            Trajectories = self.scanserver.trajectories
            self.output("Trajectories:")
            for trajectory in Trajectories:
                self.output(trajectory)
        else:
            self.output("Trajectories is empty")        
		
class set_scan_trajectories2(Macro, _scanserver):
    """The set_scan_trajectories2 macro is used to set the trajectories2 in the scan server."""
    
    param_def = [
       ['points_in_trajectory2', Type.Integer, None, "Points in trajectory2"],
       ['number_of_actuators2', Type.Integer, None, "Number of actuators2"],
       ['trajectorypoint_1', Type.String, None, "Point to be added (could be a list separated by ,"],
       ['trajectorypoint_2', Type.String, " ", "Point to be added"],
       ['trajectorypoint_3', Type.String, " ", "Point to be added"],
       ['trajectorypoint_4', Type.String, " ", "Point to be added"],
       ['trajectorypoint_5', Type.String, " ", "Point to be added"],
       ['trajectorypoint_6', Type.String, " ", "Point to be added"],
       ['trajectorypoint_7', Type.String, " ", "Point to be added"],
       ['trajectorypoint_8', Type.String, " ", "Point to be added"],
       ['trajectorypoint_9', Type.String, " ", "Point to be added"],
       ['trajectorypoint_10', Type.String, " ", "Point to be added"],
       ['trajectorypoint_11', Type.String, " ", "Point to be added"],
       ['trajectorypoint_12', Type.String, " ", "Point to be added"],
       ['trajectorypoint_13', Type.String, " ", "Point to be added"],
       ['trajectorypoint_14', Type.String, " ", "Point to be added"],
       ['trajectorypoint_15', Type.String, " ", "Point to be added"],
       ['trajectorypoint_16', Type.String, " ", "Point to be added"],
       ['trajectorypoint_17', Type.String, " ", "Point to be added"],
       ['trajectorypoint_18', Type.String, " ", "Point to be added"],
       ['trajectorypoint_19', Type.String, " ", "Point to be added"],
       ['trajectorypoint_20', Type.String, " ", "Point to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self,  points_in_trajectory, number_of_actuators,* pars):
        if not self.prepared:
            return        
        values = []
        for p in pars:
            act_list = p.split(",")
            for act in act_list:
                if act != " ":
                    values.append(str(act))
                    
        self.scanserver.write_attribute("trajectories2",values,  points_in_trajectory, number_of_actuators)
		
class get_scan_trajectories2(Macro, _scanserver):
    """The get_scan_trajectories2 macro is used to read the trajectories2 set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        dim_x = self.scanserver.read_attribute("trajectories2").dim_x
        if dim_x > 0:
            Trajectories = self.scanserver.trajectories2
            self.output("Trajectories2:")
            for trajectory in Trajectories:
                self.output(trajectory)
        else:
            self.output("Trajectories2 is empty")

		
class set_scan_timebases(Macro, _scanserver):
    """The set_scan_timebases macro is used to set the timebases in the scan server."""
    
    param_def = [
       ['timebase_1', Type.String, None, "Timebase to be added (could be a list with elements separated by ,"],
       ['timebase_2', Type.String, " ", "Timebase to be added"],
       ['timebase_3', Type.String, " ", "Timebase to be added"],
       ['timebase_4', Type.String, " ", "Timebase to be added"],
       ['timebase_5', Type.String, " ", "Timebase to be added"],
       ['timebase_6', Type.String, " ", "Timebase to be added"],
       ['timebase_7', Type.String, " ", "Timebase to be added"],
       ['timebase_8', Type.String, " ", "Timebase to be added"],
       ['timebase_9', Type.String, " ", "Timebase to be added"],
       ['timebase_10', Type.String, " ", "Timebase to be added"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, * pars):
        if not self.prepared:
            return
        
        values = []
        for p in pars:
            act_list = p.split(",")
            for act in act_list:
                if act != " ":
                    values.append(str(act))
        self.scanserver.write_attribute("timebases",values)
	
class get_scan_timebases(Macro, _scanserver):
    """The get_scan_timebases macro is used to read the timebases set in the scanserver."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        timebases = self.scanserver.timebases
        self.output("Timebases:")
        for timer in timebases:
            self.output(timer)
            
class scan_start(Macro, _scanserver):
    """The scan_start macro is used to start a scan with the scanserver device."""
    def get_data(self):
        i = 0    
        actuators  = self.scanserver.actuators    
        actuators_list  = self.scanserver.actuatorsDataList
        for actuator in actuators:
            self.output("Actuator: ")
            self.output(actuator)
            actuator_alias = actuators_list[i]
            self.output(self.scanserver.read_attribute(actuator_alias).value)
            i = i + 1
        i = 0    
        sensors  = self.scanserver.sensors    
        sensors_list  = self.scanserver.sensorsDataList
        for sensor in sensors:
            self.output("Sensor: ")
            self.output(sensor)
            sensor_alias = sensors_list[i]
            self.output(self.scanserver.read_attribute(sensor_alias).value)
            i = i + 1
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        self.scanserver.Start()
        
        self.output("Start command executed")
		
        while self.scanserver.state() == 6: # MOVING -> Scan Running
            self.output("Wait scan running")
            self.flushOutput()
		
        self.output(self.scanserver.state())
		
        if self.scanserver.state() == 0: # ON
            self.output("Scan finished")
            self.get_data()
		
        if self.scanserver.state() ==  7: #STANDBY
            self.output("Scan paused")
            self.get_data()
		
class scan_pause(Macro, _scanserver):
    """The scan_pause macro is used to pause a scan with the scanserver device."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        ret = self.scanserver.Pause()
        
        self.output("Pause command executed")
		
class scan_resume(Macro, _scanserver):
    """The scan_resume macro is used to resume a scan with the scanserver device."""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        ret = self.scanserver.Resume()
        
        self.output("Resume command executed")
		
class scan_clean(Macro, _scanserver):
    """The scan_clean macro is used to initialize to null the scan server attributes: sensors, actuators, actuators2, timebases, trajectories"""
	
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        ret = self.scanserver.Clean()
        
        self.output("Clean command executed")

class get_scan_extra_attribute(Macro, _scanserver):
    """The get_scan_extra_attribute macro is used to read the value of the ScanServer attribute given as an argument."""
    
    param_def = [
       ['attribute_name', Type.String, None, "Attribute in ScanServer device to be read"]
    ]    
	
    def prepare(self, *pars):
        _scanserver.prepare(self)
    
    def run(self, attribute_name):
        if not self.prepared:
            return
        self.output(self.scanserver.read_attribute(attribute_name).value)
		
class set_scan_extra_attribute(Macro, _scanserver):
    """The set_scan_extra_attribute macro is used to set attributes of the ScanServer device."""
    
    param_def = [
       ['attribute_name', Type.String, None, "Attribute in ScanServer device to be set"],
       ['value_list', Type.String, None, "Attribute parameter (has to be a list with elements separated by ,"],
       ['dim_x', Type.Integer, 0, "Dim X for images"],
       ['dim_y', Type.Integer, 0, "Dim Y for images"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
    def run(self, attribute_name, value_list, dim_x, dim_y):
        if not self.prepared:
            return
        vals = value_list.split(",")
        if dim_x != 0 and dim_y != 0:
            self.scanserver.write_attribute(attribute_name,vals,dim_x, dim_y)
        else: 
            self.scanserver.write_attribute(attribute_name,vals)

class get_scanserver_config(Macro, _scanserver):
    """The get_scanserver_config macro is used to get information about the configuration."""
    
    def prepare(self):
        _scanserver.prepare(self)
    
    def run(self):
        if not self.prepared:
            return
        
        ret = self.execMacro('get_scan_sensors')       
        ret = self.execMacro('get_scan_actuators')       
        ret = self.execMacro('get_scan_actuators2')       
        ret = self.execMacro('get_scan_integrationTimes')       
        ret = self.execMacro('get_scan_trajectories')       
        ret = self.execMacro('get_scan_trajectories2')       
        ret = self.execMacro('get_scan_timebases')
        
class scan_save_config(Macro, _scanserver):
    """The scan_save_config macro is used to save the configuration."""
    
    param_def = [
       ['file_name', Type.String, "default_name.config", "Config file name"]
    ]    
    
    def prepare(self, file_name):
        _scanserver.prepare(self)
    
    def run(self, file_name):
        if not self.prepared:
            return
		
        fd = open(file_name,'w')
        
        sensors = self.scanserver.sensors
        fd.write("Sensors:\n")
        for sensor in sensors:
            fd.write(sensor)
            fd.write("\n")
        actuators = self.scanserver.actuators
        fd.write("Actuators:\n")
        for actuator in actuators:
            fd.write(actuator)
            fd.write("\n")
        actuators2 = self.scanserver.actuators2
        fd.write("Actuators2 (extern loop):\n")
        for actuator2 in actuators2:
            fd.write(actuator2)
            fd.write("\n") 
        integration_times = self.scanserver.integrationTimes
        fd.write("Integration times:\n")
        for time in integration_times:
            fd.write(str(time))
            fd.write("\n")
        fd.write("Trajectories:\n") 
        dim_x = self.scanserver.read_attribute("trajectories").dim_x 
        if dim_x > 0:        
            trajectories = self.scanserver.trajectories
            for trajectory in trajectories:
                for point in trajectory:
                    fd.write(str(point))
                    fd.write("\n")
        fd.write("Trajectories2 (extern loop):\n") 
        dim_x = self.scanserver.read_attribute("trajectories2").dim_x 
        if dim_x > 0:        
            trajectories2 = self.scanserver.trajectories2
            for trajectory2 in trajectories2:
                for point2 in trajectory2:
                    fd.write(str(point2))
                    fd.write("\n")
        timebases = self.scanserver.timebases
        fd.write("Timebases:\n")
        for timebase in timebases:
            fd.write(str(timebase))
            fd.write("\n")
		
        fd.write("Alternative parameter: \n")		
        fd.write("End \n")
		
        fd.close() 

# The Alternative parameter should be saved like:
#
#Alternative parameter:
#name_of_parameter
#dim_x yyy (1 if scalar, more than 1 if spectrum)
#dim_y yyy (> 0 if image)
#value_1
#value_2
# ...
#Alternative parameter:
#other_parameter
#dim_x yyy
#dim_y yyy
#value_1
#value_2
# ...

class scan_load_config(Macro, _scanserver):
    """The scan_save_config macro is used to save the configuration."""
    
    param_def = [
       ['file_name', Type.String, None, "Config file name"]
    ]    
    
    def prepare(self, file_name):
        _scanserver.prepare(self)
    
    def run(self, file_name):
        if not self.prepared:
            return
		
        fd = open(file_name,'r')
		
        ret = fd.readline()
        if ret.find("Sensors:") != -1:
			nb_sensors = 0
			values = []
			send_str = 'Sensors: \n'
			ret = fd.readline()
			send_str += ret
                        ret = ret.replace('\n','')
			values.append(str(ret))
			while ret.find("Actuators:") is -1:
				nb_sensors += 1
				ret = fd.readline()
				if ret.find("Actuators:") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(str(ret))
			self.output(send_str)
			self.flushOutput()
			self.scanserver.write_attribute("sensors",values)
        if ret.find("Actuators:") != -1:
			nb_actuators = 0
			values = []
			send_str = 'Actuators: \n'
			ret = fd.readline()
			send_str += ret
                        ret = ret.replace('\n','')
			values.append(str(ret))
			while ret.find("Actuators2 (extern loop):") is -1:
				nb_actuators += 1
				ret = fd.readline()
				if ret.find("Actuators2 (extern loop):") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(str(ret))
			self.output(send_str)
			self.flushOutput()
			self.scanserver.write_attribute("actuators",values)
        if ret.find("Actuators2 (extern loop):") != -1:
			nb_actuators2 = 0
			values = []
			flag_write = 0
			send_str = 'Actuators2 (extern loop): \n'
			ret = fd.readline()
			if ret.find("Integration times:") is -1:
				send_str += ret
                        	ret = ret.replace('\n','')
				values.append(str(ret))
				flag_write = 1
			while ret.find("Integration times:") is -1:
				nb_actuators2 += 1
				ret = fd.readline()
				if ret.find("Integration times:") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(str(ret))
					flag_write = 1
			self.output(send_str)
			self.flushOutput()
			if flag_write is 1:
				self.scanserver.write_attribute("actuators2",values)
        if ret.find("Integration times:") != -1:
			nb_integrationtimes = 0
			values = []
			send_str = 'Integration Times:\n'
			ret = fd.readline()
			send_str += ret
                        ret = ret.replace('\n','')
			values.append(ret)
			while ret.find("Trajectories:") is -1:
				nb_integrationtimes += 1
				ret = fd.readline()
				if ret.find("Trajectories:") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(ret)
			self.output(send_str)
			self.flushOutput()
			self.scanserver.write_attribute("integrationTimes",values)
        if ret.find("Trajectories:") != -1:
			nb_trajectories = 0
			values = []
			send_str = 'Trajectories: \n'
			send_str += 'Points/trajectory '
			send_str += str(nb_integrationtimes)
			send_str += '\nNumber of actuators '
			send_str += str(nb_actuators)
			send_str += '\n'
			ret = fd.readline()
			send_str += ret
                        ret = ret.replace('\n','')
			values.append(ret)
			while ret.find("Trajectories2 (extern loop)") is -1:
				nb_trajectories += 1
				ret = fd.readline()
				if ret.find("Trajectories2 (extern loop)") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(ret)
			self.output(send_str)
			self.scanserver.write_attribute("trajectories",values,nb_integrationtimes,nb_actuators)
        if ret.find("Trajectories2 (extern loop):") != -1:
			nb_trajectories2 = 0
			values = []
			flag_write = 0
			send_str = 'Trajectories2 (extern loop):\n'
			ret = fd.readline()
			tmp_str = ' '
			if ret.find("Timebases:") is -1:
				tmp_str += ret
                        	ret = ret.replace('\n','')
				values.append(ret)
				flag_write = 1
			while ret.find("Timebases:") is -1:
				nb_trajectories2 += 1
				ret = fd.readline()
				if ret.find("Timebases:") is -1:
					tmp_str += ret
					ret = ret.replace('\n','')
					values.append(ret)
					flag_write = 1
			nb_tmp = 0
			if nb_actuators2 is not 0:
				nb_tmp = nb_trajectories2/nb_actuators2
			send_str += 'Points/trajectory '
			send_str += str(nb_tmp)
			send_str += '\nNumber of actuators2 '
			send_str += str(nb_actuators2)
			send_str += tmp_str
			self.output(send_str)
			self.flushOutput()
			if flag_write is 1:
				self.scanserver.write_attribute("trajectories2",values,nb_tmp,nb_actuators2)
        if ret.find("Timebases:") != -1:
			values = []
			flag_write = 0
			send_str = 'Timebases: \n'
			ret = fd.readline()
			if ret.find("Alternative parameter::") is -1:
				send_str += ret
                        	ret = ret.replace('\n','')
				values.append(str(ret))
				flag_write = 1
			while ret.find("Alternative parameter:") is -1:
				ret = fd.readline()
				if ret.find("Alternative parameter:") is -1:
					send_str += ret
					ret = ret.replace('\n','')
					values.append(str(ret))
					flag_write = 1
			self.output(send_str)
			self.flushOutput()
			if flag_write is 1:
				self.scanserver.write_attribute("timebases",values)
        while ret.find("Alternative parameter:") != -1:
			ret = fd.readline()
			send_str += ret
			parameter_name = ret.replace('\n','')
			values = []
			dim_x = 0
			dim_y = 0
			while ret.find("Alternative parameter:") is -1 and ret.find("End") is -1:
				ret = fd.readline()
				if ret.find("Alternative parameter:") is -1:
					send_str += ret
                                        if ret.find("dim_x") != -1:
                                        	dim_x = ret.replace("dim_x ","")
                                        	dim_x = dim_x.replace('\n','')
                                        elif ret.find("dim_y") != -1:
                                        	dim_y = ret.replace("dim_y ","")
                                        	dim_y = dim_y.replace('\n','')
                                        else:
                                        	ret.replace('\n','')
                                        	values.append(ret)
			self.output(send_str)
			self.flushOutput()
                        if dim_x > 0 and dim_y > 0:
				self.scanserver.write_attribute(parameter_name,values,dim_x,dim_y)
                        elif dim_x == '1':
				self.scanserver.write_attribute(parameter_name,values[0])
                        else:
				self.scanserver.write_attribute(parameter_name,values)

# The Alternative parameter should be in the loaded file like:
#
#Alternative parameter:
#name_of_parameter
#dim_x yyy (1 if scalar, more than 1 if spectrum)
#dim_y yyy (> 0 if image)
#value_1
#value_2
# ...
#Alternative parameter:
#other_parameter
#dim_x yyy
#dim_y yyy
#value_1
#value_2
# ...

class scan_start_list(Macro, _scanserver):
    """The scan_start_list macro is used to start serie of scans with different configurations."""
    param_def = [
       ['file_name', Type.String, None, "File with the list of configuration files"]
    ]    
	
    def prepare(self, * pars):
        _scanserver.prepare(self)
    
        
    def run_scan(self,cmd_line):
        self.debug("invoking execMacro('%s')" % (cmd_line))

        self.execMacro('scan_load_config',cmd_line)
        
        self.execMacro('scan_start')
	
    def run(self, file_name):


		
        fd = open(file_name,'r')
        
        ret = fd.readline()
        ret = ret.replace( "\n", "" )       
        ret = ret.replace( " ", "" )
		
        while ret.find("End") is -1:
        	self.output("Executing scan with configuration file " + ret)
        	self.flushOutput()
        	self.run_scan(ret)
        
        	ret = fd.readline()	       
        	ret = ret.replace( "\n", "" )       
        	ret = ret.replace( " ", "" )
